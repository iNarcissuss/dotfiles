#!/bin/sh
CWD=`pwd`
SRCPATH=`pwd`
updates=""

if [ -e .svn ]; then
    echo "Pulling from remote in $(pwd)"
    if svn update |tee /dev/stderr | grep pull > /dev/null; then
        echo "There were pull infrastructure updates, reexecuting"
        exec $0 $@
    fi
fi

pulled=0
if [ -f $SRCPATH/.pull_data ]; then
    pulled=1
    . $SRCPATH/.pull_data
fi
if [ -f $SRCPATH/pull_data ]; then
    pulled=1
    . $SRCPATH/pull_data
fi

if [ $pulled = "0" ]; then
    echo "Couldn't find [.]pull_data, bailing"
    exit
fi
if [ -z "$data" ]; then
    echo "Data file does not define \$data"
    exit
fi
if [ -z "$GITPATH" ]; then
    echo "Data file does not define \$GITPATH"
    exit
fi
if [ -n "$RECURSIVE" -a -n "$NORECURSIVE" ];then
    echo "Not pulling recursively in `pwd` as requested"
    exit
fi


pull_or_clone()
    while [ $# -ge 2 ]; do
        cd "$CWD"
        IPATH="$1"; shift
        REPO="$1"; shift
        RCS="$1"; shift

        # Define RCS Data:
        case $RCS in
        "svn")
            CHECKOUT="checkout $SVN_CLONE_OPTS"
            PULL="update $SVN_PULL_OPTS"
            ;;
        "git")
            CHECKOUT="clone $GIT_CLONE_OPTS"
            PULL="pull --ff-only --all $GIT_PULL_OPTS"
            ;;
        "hg")
            CHECKOUT="clone $HG_CLONE_OPTS"
            PULL="pull $HG_PULL_OPTS"
            ;;
        "bzr")
            CHECKOUT="branch $BZR_CLONE_OPTS"
            PULL="pull $BZR_PULL_OPTS"
            ;;
        *)
            echo "Broken RCS @ $IPATH"
            continue
            ;;
        esac

        COPATH="$GITPATH"/"$IPATH"

        if [ ! -d "$COPATH" ]; then
            $RCS $CHECKOUT "$REPO" "$COPATH"
            cd "$COPATH"
            if [ -x __setup.sh ]; then
                echo "Issuing setup commands"
                ./__setup.sh
            fi
        else
            cd "$COPATH"
            echo "pulling from remote in $COPATH"
            $RCS $PULL ||
                updates="$COPATH $updates"

            if [ -x __update.sh ]; then
                ./__update.sh
            fi
        fi
        if [ -e .pull_data ]; then
            echo "Pulling externals in: $(pwd)"
            exec 3>&1 4>&2

            updates="$( { RECURSIVE=yes pull_ext 2>&1 1>&3; } 2>&1 ) $updates"

            exec 3>&- 4>&-
        fi

        cd "$CWD"
    done

pull_or_clone $data

if [ -z "$RECURSIVE" ]; then
    echo $updates >&2
else
    for i in $updates; do
        echo "Manual intervention required in $i"
    done
fi
